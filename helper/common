#!/bin/bash

CUR_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
LOG_PATH="$CUR_DIR/../tmp/logs"
mkdir -p "$LOG_PATH"

build_docker() {
  title "Building Docker images"

  docker-compose build

  title "Done building Docker images"
}

reset() {
  title "Removing Docker volumes"

  docker volume rm zillinka_core-db || :
  docker volume rm zillinka_ei-db || :

  rm ./cl_login.txt || :

  title "Done removing Docker volumes"
}

waitFor() {
  [ -z "$2" ] && timeout=60 || timeout=$2
  sleepCount=0
  while [ "$sleepCount" -le "$timeout" ] && ! eval "$1" >/dev/null; do
    sleep 1
    sleepCount=$((sleepCount + 1))
  done

  if [ "$sleepCount" -gt "$timeout" ]; then
    printf -- "\033[31mTimed out waiting for '%s' (waited %ss).\033[0m\n" "$1" "${timeout}"
    exit 1
  fi
}

waitForResponse() {
  title "Waiting for $1."
  waitFor "curl -s \"$1\""
  title "Service on $1 is ready."
}

launch_chainlink() {
  waitForResponse "$CHAINLINK_URL"
  title "Chainlink is running."
}

login_chainlink() {
  docker exec chainlink-node chainlink admin login -f /run/secrets/apicredentials
}

run_ei() {
  title "Running External Initiator..."
  echo "Path: " $(pwd)
  if [ "$EI_CI_ACCESSKEY" != "" ]; then
    {
      echo "EI_CI_ACCESSKEY=$EI_CI_ACCESSKEY"
      echo "EI_CI_SECRET=$EI_CI_SECRET"
      echo "EI_IC_ACCESSKEY=$EI_IC_ACCESSKEY"
      echo "EI_IC_SECRET=$EI_IC_SECRET"
    } >external_initiator.env
  fi

  docker-compose up -d external-initiator

  waitForResponse "http://localhost:8080/health"
}

add_ei() {
  title "Adding External Initiator to Chainlink node..."

  pushd scripts >/dev/null || exit

  local log=$LOG_PATH/add_ei.log
  yarn add-ei | tee "$log"
  EI_CI_ACCESSKEY=$(grep <"$log" 'EI outgoing token:' | awk '{print$4}')
  EI_CI_SECRET=$(grep <"$log" 'EI outgoing secret:' | awk '{print$4}')
  EI_IC_ACCESSKEY=$(grep <"$log" 'EI incoming accesskey:' | awk '{print$4}')
  EI_IC_SECRET=$(grep <"$log" 'EI incoming secret:' | awk '{print$4}')

  export EI_CI_ACCESSKEY && export EI_CI_SECRET && export EI_IC_ACCESSKEY && export EI_IC_SECRET

  echo "EI has been added to Chainlink node"
  popd >/dev/null || exit

  title "Done adding EI."
}

start_docker() {
  title "Starting Docker containers"

  docker-compose up -d core-db external-initiator-db chainlink-node geth-client \
    external-adapter-unixtime external-adapter-rhine_gauge external-adapter-pricefeed

  export CHAINLINK_URL="http://localhost:6688/"
  export EXTERNAL_INITIATOR_URL="http://external-initiator:8080/"

  launch_chainlink

  title "Done starting Docker containers"
}

stop_docker() {
  title "Stopping Docker containers"

  docker-compose down

  title "Done stopping Docker containers"
}

print_logs() {
  for log in $(find "$LOG_PATH" -maxdepth 1 -type f -iname '*.log'); do
    heading "$log"
    cat "$log"
  done
}

exit_handler() {
  errno=$?
  # Print all the logs if the test fails
  if [ $errno -ne 0 ]; then
    title "ABORTING TEST"
    printf -- "Exited with code %s\n" "$errno"
    print_logs
  fi
  exit $errno
}

title() {
  printf -- "\033[34m%s\033[0m\n" "$1"
}

heading() {
  printf -- "\n--------------------------------------------------------------------------------\n"
  title "$1"
  printf -- "--------------------------------------------------------------------------------\n\n"
}
