scilla_version 0

(***********************************************************************************)
(* Retrieves the price of ZIL to USD                                               *)
(* Oracle: serves client requests through transition: request()                    *)
(*         emits an event with the request details, stores the request internally  *)
(*         by assigning it a request_id storing the initiator (the client's addr). *)
(*         The result of the request is an Option (initially None) that gets set   *)
(*         once the contract receives the data through                             *)
(*          set_data(data: String, request_id: Uint32)                             *)
(*         it stores the data internally (mostly for testing purpose) and sends it *)
(*         back to the client by sending a message to its callback:                *)
(*           callback_data(data: String)                                           *)
(***********************************************************************************)

library Oracle

let zero128 = Uint128 0 (* used for zero amounts *)

(* string is the price in string format *)
type DataRequest = (* requestor, [result] *)
  | DataRequest of ByStr20 (Option String)

(* Error events *)
type Error =
| CodeNotContractOwner
| CodeRequestNotFound

let get_requestor = fun(request: DataRequest) =>
  match request with
  | DataRequest requestor result_o => requestor
  end

let one_msg = (* Wrap single message into singleton list *)
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner        => Int32 -1
      | CodeRequestNotFound         => Int32 -2
      end
    in
    { _exception : "Error"; code : result_code }

contract Oracle
(initial_owner: ByStr20)

field next_request_id: Uint32 = Uint32 0 (* keep track of requests by the counter *)
field data_requests: Map Uint32 DataRequest = Emp Uint32 DataRequest (* m[req_id] = (requestor, [result]) *)
field current_owner: ByStr20 = initial_owner

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end


procedure IsSenderOwner(address: ByStr20)
  owner <- current_owner;
  is_owner = builtin eq owner address;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end


transition changeOwner(new_owner: ByStr20)
  IsSenderOwner _sender;
  current_owner := new_owner;
  ev = {_eventname : "changeOwner"; new_owner: new_owner; initiator: _sender};
  event ev
end


(* @notice: request data from an oracle                         *)
transition request()
  request_id <- next_request_id;
  no_result = None {String};
  request = DataRequest _sender no_result;
  data_requests[request_id] := request;
  one32 = Uint32 1;
  next_id = builtin add request_id one32;
  next_request_id := next_id;
  ev = {_eventname : "request"; requestId: request_id; initiator: _sender};
  event ev
end


(* @notice: give the oracle some (off-chain) data; used only by owner *)
(* @param:  data : the data (price feed)                        *)
(* @param:  request_id: the unique id as in emitted event above *)
transition set_data(data: String, request_id: Uint32)
  IsSenderOwner _sender;
  req_o <- data_requests[request_id];
  match req_o with
  |None =>
    err = CodeRequestNotFound;
    ThrowError err
  |Some request => (* emit and callback the requestor with the data *)
    to = get_requestor request;
    res_o = Some {String} data;
    request_with_result = DataRequest to res_o;
    data_requests[request_id] := request_with_result; (* store in state, mostly for testing *)
    msg = {_tag: "callback_data"; _recipient: to; _amount: zero128; data: data};
    msgs = one_msg msg;
    send msgs
  end (* reg_o *)
end
